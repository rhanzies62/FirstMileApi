//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace firstmile.services {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class FMServiceResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal FMServiceResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("firstmile.services.FMServiceResource", typeof(FMServiceResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Customer not found.
        /// </summary>
        internal static string AddCustomerUser_CustomerNotFound {
            get {
                return ResourceManager.GetString("AddCustomerUser_CustomerNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect Pasword.
        /// </summary>
        internal static string AuthenticateUser_IncorrectPassword {
            get {
                return ResourceManager.GetString("AuthenticateUser_IncorrectPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User not found.
        /// </summary>
        internal static string AuthenticateUser_UserNotFound {
            get {
                return ResourceManager.GetString("AuthenticateUser_UserNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select b.Salesid,concat(b.ProjectName,&apos; - &apos;,c.Name) as Title,
        ///(select top 1 BorrowedDateFrom from fmbookequipment
        ///where saleid =  b.SalesId
        ///order by BorrowedDateFrom) as StartDate,
        ///(select top 1 BorrowedDateTo from fmbookequipment
        ///where saleid = b.SalesId
        ///order by BorrowedDateTo desc) as EndDate,
        ///case when color is null then concat(&apos;#&apos;,CONVERT(VARCHAR(max), CRYPT_GEN_RANDOM(3), 2)) else color end as color
        ///from FmBooking b
        ///join FmCustomer c on b.CustomerId = c.CustomerId
        ///##CustomerId##.
        /// </summary>
        internal static string BookingSchedules {
            get {
                return ResourceManager.GetString("BookingSchedules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select 
        ///	be.SaleId as SalesId,
        ///	isnull(e.Name,act.Description) as Title,
        ///	be.BorrowedDateFrom as StartDate,
        ///	be.BorrowedDateTo as EndDate,
        ///	b.Color
        ///from fmbookequipment be
        ///join FmBooking b on be.SaleId  = b.SalesId
        ///join FmLookUpType ACT on be.ServiceTypeId = act.LookUpValue and act.EntityCode = &apos;ACT&apos;
        ///left join FmEquipment e on be.EquipmentId = e.EquipmentId
        ///where b.CustomerId = ##customerId## and be.SaleId like &apos;%##salesId##%&apos;.
        /// </summary>
        internal static string BookingSchedulesByProjectId {
            get {
                return ResourceManager.GetString("BookingSchedulesByProjectId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equipment is not available in the specified duration.
        /// </summary>
        internal static string CheckIfEquipmentAvailable_EquipmentNotAvailable {
            get {
                return ResourceManager.GetString("CheckIfEquipmentAvailable_EquipmentNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some of the equipments are already booked. Please review the data.
        /// </summary>
        internal static string CreateBooking_EquipmentAlreadyBooked {
            get {
                return ResourceManager.GetString("CreateBooking_EquipmentAlreadyBooked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This equipment is already existing.
        /// </summary>
        internal static string CreateEquipment_EquipmentAlreadyExisting {
            get {
                return ResourceManager.GetString("CreateEquipment_EquipmentAlreadyExisting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equipment Type is not valid.
        /// </summary>
        internal static string CreateEquipment_EquipmentTypeNotValid {
            get {
                return ResourceManager.GetString("CreateEquipment_EquipmentTypeNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This serial number is not existing.
        /// </summary>
        internal static string CreateEquipment_SerialNumberIsNotExisting {
            get {
                return ResourceManager.GetString("CreateEquipment_SerialNumberIsNotExisting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Province do not belong to the selected country.
        /// </summary>
        internal static string CreateUser_ProvinceNotBelongToCountry {
            get {
                return ResourceManager.GetString("CreateUser_ProvinceNotBelongToCountry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Province is not existing.
        /// </summary>
        internal static string CreateUser_ProvinceNotExisting {
            get {
                return ResourceManager.GetString("CreateUser_ProvinceNotExisting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Username already existing.
        /// </summary>
        internal static string CreateUser_UsernameExisting {
            get {
                return ResourceManager.GetString("CreateUser_UsernameExisting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User type is not valid.
        /// </summary>
        internal static string CreateUser_UserTypeNotValid {
            get {
                return ResourceManager.GetString("CreateUser_UserTypeNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Server Error Occurred.
        /// </summary>
        internal static string CriticalErrorMessage {
            get {
                return ResourceManager.GetString("CriticalErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select 
        ///act.Description as ServiceType,
        ///be.ServiceTypeId,
        ///b.SalesId,
        ///cu.UserId,
        ///EQT.Description as Type,
        ///e.Type as TypeId,
        ///e.Name,
        ///e.Serial,
        ///e.GatewayId,
        ///e.EquipmentId,
        ///min(FORMAT(be.BorrowedDateFrom, &apos;d&apos;, &apos;en-US&apos; )) as BorrowedDateFromST,
        ///max(FORMAT(be.BorrowedDateTo, &apos;d&apos;, &apos;en-US&apos; )) as BorrowedDateToST from FmBookEquipment be
        ///join FmBooking b on be.SaleId = b.SalesId
        ///join FmCustomerUser cu on b.CustomerId = cu.CustomerId
        ///left join FmEquipment e on be.EquipmentId = e.EquipmentId
        ///join FmLook [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ListActiveBookEquipment {
            get {
                return ResourceManager.GetString("ListActiveBookEquipment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select b.SalesId,eq.EquipmentId,eq.Type as TypeId,eq.Name,eqt.Description as Type,eq.GatewayId,FORMAT(beq.BorrowedDateFrom, &apos;d&apos;, &apos;en-US&apos; ) as BorrowedDateFrom,FORMAT(beq.BorrowedDateTo, &apos;d&apos;, &apos;en-US&apos; ) as BorrowedDateTo,c.Name as CustomerName,b.ProjectName,b.Color from fmequipment eq
        ///join FmLookUpType eqt on eq.Type = eqt.LookUpValue and eqt.EntityCode = &apos;EQT&apos;
        ///join FmBookEquipment beq on eq.EquipmentId = beq.EquipmentId
        ///join FmBooking b on b.SalesId = beq.SaleId
        ///join fmcustomer c on b.CustomerId = c.Cust [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ListActiveEquipment {
            get {
                return ResourceManager.GetString("ListActiveEquipment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select * from(
        ///select m.*,eq.Name from Meili m
        ///join FmEquipment eq on m.EquipmentId = eq.EquipmentId
        ///) as q
        ///##WHERE##
        ///ORDER BY ##ORDERBY##
        ///OFFSET ##SKIP## ROWS FETCH NEXT ##TAKE## ROWS only
        ///
        ///select count(q.MeiliId) as TotalCount from (
        ///select m.*,eq.Name from Meili m
        ///join FmEquipment eq on m.EquipmentId = eq.EquipmentId
        ///) as q
        ///##WHERE##
        ///
        ///.
        /// </summary>
        internal static string ListAllMeili {
            get {
                return ResourceManager.GetString("ListAllMeili", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select count(saleequipmentid) as TotalCount from FmBookEquipment
        ///where SaleId = ##SalesID##
        ///
        ///select * from 
        ///(select be.SaleEquipmentId,be.EquipmentId,e.Name,e.Serial,e.Description,eqt.Description as Type,FORMAT ( be.BorrowedDateFrom, &apos;d&apos;, &apos;en-US&apos; ) as BorrowedDateFromST, FORMAT ( be.BorrowedDateTo, &apos;d&apos;, &apos;en-US&apos; ) as BorrowedDateToST,be.BorrowedDateFrom,be.BorrowedDateTo,be.CreatedDate,u.Username,act.Description as ServiceType, be.ServiceTypeId from FmBookEquipment be
        ///join FMLookUpType act on be.Service [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ListBookEquipment {
            get {
                return ResourceManager.GetString("ListBookEquipment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT   Count(SalesId) as TotalCount
        ///FROM     (select SalesId,ProjectName,c.Name as CustomerName from FmBooking b JOIN FmCustomer c on b.CustomerId = c.CustomerId) as q
        ///##WHERE##
        ///
        ///select * from (SELECT   b.SalesId, 
        ///         b.CustomerId, 
        ///		 b.CreatedBy,
        ///		 c.Name as CustomerName,
        ///		 count(be.SaleEquipmentId) as EquipmentCount,
        ///         u.username as CreatedByUserName, 
        ///		 b.CreatedDate,
        ///         max(FORMAT(b.CreatedDate, &apos;d&apos;, &apos;en-US&apos; )) as CreatedDateString,
        ///		 sts.Description as Status,
        ///		  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ListBooking {
            get {
                return ResourceManager.GetString("ListBooking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select 
        ///act.Description as ServiceType,
        ///be.ServiceTypeId,
        ///b.SalesId,
        ///cu.UserId,
        ///EQT.Description as Type,
        ///e.Type as TypeId,
        ///e.Name,
        ///e.Serial,
        ///e.GatewayId,
        ///e.EquipmentId,
        ///b.ProjectName,
        ///min(FORMAT(be.BorrowedDateFrom, &apos;d&apos;, &apos;en-US&apos; )) as BorrowedDateFromST,
        ///max(FORMAT(be.BorrowedDateTo, &apos;d&apos;, &apos;en-US&apos; )) as BorrowedDateToST from FmBookEquipment be
        ///join FmBooking b on be.SaleId = b.SalesId
        ///join FmCustomerUser cu on b.CustomerId = cu.CustomerId
        ///left join FmEquipment e on be.EquipmentId = e.Equipmen [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ListBookingHistoryByUserId {
            get {
                return ResourceManager.GetString("ListBookingHistoryByUserId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT   Count(customerid) as TotalCount
        ///FROM     FmCustomer
        ///##WHERE##
        ///
        ///SELECT   c.CustomerId, 
        ///         c.Name, 
        ///         c.Phone, 
        ///         c.Email, 
        ///         u.username as CreatedBy, 
        ///         c.CreatedDate,
        ///         FORMAT(c.CreatedDate, &apos;d&apos;, &apos;en-US&apos; ) as CreatedDateString,
        ///         c.Address,
        ///         c.City,
        ///         c.CountryId,
        ///         c.PostalCode,
        ///         c.ProvinceId,
        ///		 cnt.Description as Country,
        ///		 p.Description as Province
        ///FROM     fmcustomer c
        ///JOIN fmuser u on c.CreatedB [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ListCustomer {
            get {
                return ResourceManager.GetString("ListCustomer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT   Count(equipmentid) as TotalCount
        ///FROM     FmEquipment
        ///##WHERE##
        ///
        ///SELECT * FROM
        ///(SELECT   eq.EquipmentId, 
        ///         eq.Company, 
        ///         eq.Description, 
        ///         eq.Name,
        ///         eq.Serial,
        ///         eq.CreatedDate, 
        ///         u.Username, 
        ///         eqt.description AS Type,
        ///         eq.Type as TypeId,
        ///         eq.GatewayId,
        ///         eq.IsActive,
        ///         eq.UpdatedDate,
        ///         up.Username as UpdatedByUsername
        ///FROM     fmequipment eq 
        ///	JOIN fmlookuptype eqt ON eq.type = eqt.looku [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ListEquipments {
            get {
                return ResourceManager.GetString("ListEquipments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select u.UserId,u.FirstName,u.LastName,u.Username from FmCustomerUser cu
        ///right join FmUser u on cu.UserId = u.UserId
        ///where cu.CustomerUserId is null and u.type = 2.
        /// </summary>
        internal static string ListNotAssignedUserToCustomer {
            get {
                return ResourceManager.GetString("ListNotAssignedUserToCustomer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select * from(
        ///select m.*,eq.Name from Meili m
        ///join FmEquipment eq on m.EquipmentId = eq.EquipmentId
        ///where m.UserId = ##UserId##
        ///) as q
        ///##WHERE##
        ///ORDER BY ##ORDERBY##
        ///OFFSET ##SKIP## ROWS FETCH NEXT ##TAKE## ROWS only
        ///
        ///select count(q.MeiliId) as TotalCount from (
        ///select m.*,eq.Name from Meili m
        ///join FmEquipment eq on m.EquipmentId = eq.EquipmentId
        ///where m.UserId = ##UserId##
        ///) as q
        ///##WHERE##
        ///
        ///.
        /// </summary>
        internal static string ListUserMeili {
            get {
                return ResourceManager.GetString("ListUserMeili", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select count(userid) as TotalCount from FmUser
        ///
        ///select * from
        ///(select 
        ///u.UserId,
        ///u.FirstName,
        ///u.LastName,
        ///u.Username,
        ///u.Email,
        ///u.ContactNumber,
        ///ust.Description as &apos;UserType&apos;,
        ///u.PostalCode + &apos; &apos; + u.City + &apos;, &apos; + p.Description + &apos; &apos; + cnt.Description as FullAddress
        ///from FmUser as u
        ///join FmLookUpType as ust on u.Type = ust.LookUpValue and ust.EntityCode = &apos;UST&apos;
        ///left join FmLookUpType  as cnt on u.Type = cnt.LookUpValue and cnt.EntityCode = &apos;CNT&apos;
        ///left join Fmprovince p on u.ProvinceId = p.Provin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ListUsers {
            get {
                return ResourceManager.GetString("ListUsers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ##ORDERBY##.
        /// </summary>
        internal static string QueryToken_OrderBy {
            get {
                return ResourceManager.GetString("QueryToken_OrderBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ##SKIP##.
        /// </summary>
        internal static string QueryToken_Skip {
            get {
                return ResourceManager.GetString("QueryToken_Skip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ##TAKE##.
        /// </summary>
        internal static string QueryToken_Take {
            get {
                return ResourceManager.GetString("QueryToken_Take", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ##WHERE##.
        /// </summary>
        internal static string QueryToken_Where {
            get {
                return ResourceManager.GetString("QueryToken_Where", resourceCulture);
            }
        }
    }
}
